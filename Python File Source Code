SOURCE CODE â€“ STEGANOGRAPHY

ENCRYPTION CODE:
# Python program implementing Image Steganograph
# PIL module is used to extract
# pixels of image and modify it
from PIL import Image
# Convert encoding data into 8-bit binary
# form using ASCII value of characters
def genData(data):
# list of binary codes
# of given data
newd = []
for i in data:
newd.append(format(ord(i), '08b'))
return newd
# Pixels are modified according to the
# 8-bit binary data and finally returned
def modPix(pix, data):
datalist = genData(data)
lendata = len(datalist)
imdata = iter(pix)
for i in range(lendata):
# Extracting 3 pixels at a time
pix = [value for value in imdata. next ()[:3] +
imdata. next ()[:3] +
imdata. next ()[:3]]
# Pixel value should be made
# odd for 1 and even for 0
for j in range(0, 8):
if (datalist[i][j] == '0' and pix[j]% 2 != 0):
pix[j] -= 1
elif (datalist[i][j] == '1' and pix[j] % 2 == 0):
if(pix[j] != 0):
pix[j] -= 1
else:
pix[j] += 1
# pix[j] -= 1
# Eighth pixel of every set tells
# whether to stop ot read further.
# 0 means keep reading; 1 means thec
# message is over.
if (i == lendata - 1):
if (pix[-1] % 2 == 0):
if(pix[-1] != 0):
pix[-1] -= 1
else:
pix[-1] += 1
else:
if (pix[-1] % 2 != 0):
pix[-1] -= 1
pix = tuple(pix)
yield pix[0:3]
yield pix[3:6]
yield pix[6:9]
def encode_enc(newimg, data):
w = newimg.size[0]
(x, y) = (0, 0)
for pixel in modPix(newimg.getdata(), data):
# Putting modified pixels in the new image
newimg.putpixel((x, y), pixel)
if (x == w - 1):
x = 0
y += 1
else:
x += 1
# Encode data into image
def encode():
img = input("Enter image name(with extension) : ")
image = Image.open(img, 'r')
data = input("Enter data to be encoded : ")
if (len(data) == 0):
raise ValueError('Data is empty')
newimg = image.copy()
encode_enc(newimg, data)
new_img_name = input("Enter the name of new image(with extension) : ")
newimg.save(new_img_name, str(new_img_name.split(".")[1].upper()))
# Decode the data in the image
def decode():
img = input("Enter image name(with extension) : ")
image = Image.open(img, 'r')
data = ''
imgdata = iter(image.getdata())
while (True):
pixels = [value for value in imgdata. next ()[:3] +
imgdata. next ()[:3] +
imgdata. next ()[:3]]
# string of binary data
binstr = ''
for i in pixels[:8]:
if (i % 2 == 0):
binstr += '0'
else:
binstr += '1'
data += chr(int(binstr, 2))
if (pixels[-1] % 2 != 0):
return data
# Main Function
def main():
a = int(input(":: Welcome to Steganography ::\n"
"1. Encode\n2. Decode\n"))
if (a == 1):
encode()
elif (a == 2):
print("Decoded Word : " + decode())
else:
raise Exception("Enter correct input")
# Driver Code
if name == ' main ' :
# Calling main function
main()

*****************************************************************************************************************************************************************************

DECRYPTION CODE:
import cv2
from tkinter import filedialog, Tk, Button, Label
from PIL import Image, ImageTk
import numpy as np
image_display_size = 500, 350
def decrypt():
# load the image and convert it into a numpy array and display on the GUI.
load = Image.open("./encrypted_image.png")
load.thumbnail(image_display_size, Image.ANTIALIAS)
load = np.asarray(load)
load = Image.fromarray(np.uint8(load))
render = ImageTk.PhotoImage(load)
img = Label(app, image=render)
img.image = render
img.place(x=100, y=50)
# Algorithm to decrypt the data from the image
img = cv2.imread("./encrypted_image.png")
data = []
stop = False
for index_i, i in enumerate(img):i.tolist()
for index_j, j in enumerate(i):
if((index_j) % 3 == 2):
# first pixel
data.append(bin(j[0])[-1])
# second pixel
data.append(bin(j[1])[-1])
# third pixel
if(bin(j[2])[-1] == '1'):
stop = Truebreak
else:
# first pixel
data.append(bin(j[0])[-1])
# second pixel
data.append(bin(j[1])[-1])
# third pixel
data.append(bin(j[2])[-1])
if(stop):
break
message = []
# join all the bits to form letters (ASCII Representation)
for i in range(int((len(data)+1)/8)):
message.append(data[i*8:(i*8+8)])
# join all the letters to form the message.
message = [chr(int(''.join(i), 2)) for i in message]
message = ''.join(message)
message_label = Label(app, text=message, bg='lavender', font=("Times New Roman", 10))
message_label.place(x=30, y=400)
# Defined the TKinter object app with background lavender, title Decrypt, and app size
600*600 pixels.
app = Tk()
app.configure(background='lavender')
app.title("Decrypt")
app.geometry('600x600')
# Add the button to call the function decrypt.
main_button = Button(app, text="Start Program", bg='white', fg='black', command=decrypt)
main_button.place(x=250, y=10)
app.mainloop()
